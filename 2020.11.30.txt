初始化及清理：
1.构造器：创建对象时被自动调用的特殊方法，可以带来每个对象的初始化。initialize()方法
构造器采用与类相同的名称。
2.方法重载；（方法：给某个动作取的名字，通过使用名字，可以引用所有的对象和方法）
如果你调用max方法时传递的是int型参数，则int型参数的max方法就会被调用；如果传递的是double型参数，则double类型的max方法体会被调用，这叫做方法重载；就是说一个类的两个方法拥有相同的名字，但是有不同的参数列表。Java编译器根据方法签名判断哪个方法应该被调用。方法重载可以让程序更清晰易读。执行密切相关任务的方法应该使用相同的名字。重载的方法必须拥有不同的参数列表。
区别重载方法：参数数量，参数顺序
3.涉及基本类型的重载：类型转化，提升或者窄化
4.方法的返回值不能区别重载方法,只能依靠类名或者方法的形参列表
5.默认构造器：创造一个默认对象，在没有定义构造器的前提下
6.this关键字：
1.在方法的内部this 指向调用它所在方法的对象（如果在方法内部调用同一类的另一方法是不需要用到，直接调用即可）。  
2.在构造器用调用构造器，构造器只能通过this调用一个，当参数和数据成员名字相同时，可以用this.s来表示数据成员
3.回顾static方法：static方法就是没有this的方法（全局方法）
7.垃圾回收：
finalize()方法：1.对象可能不被垃圾回收；2.垃圾回收并不等于“析构”；3.垃圾回收只与内存有关
8.终结处理： System.gc()强制进行终结动作
9.垃圾回收器的工作原理：
对“活”的对象进行溯源到其存活在堆栈和静态存储区之间的引用。停止-复制法，暂停程序，将存活的对象从复制到另一个堆，没有复制的都是 垃圾，然后紧密排序。效率低：数据之间的倒腾使空间消耗需要多一倍，处理方法按需从堆中非配几块较大的内存复制在这里面进行。复制会将稳定的程序的所有内存复制一次，造成浪费---引出标记-清扫模式
10.成员初始化:java中尽力确保所有变量在使用前都能得到适当的初始化。
11.指定初始化：在定义类成员变量的地方赋值
12.构造器初始化：无法阻止自动初始化的进行，它将在构造器被调用之前发生。
int i;
Counter(){i=7;};
13.初始化的顺序：在类的内部，变量定义的先后顺序决定了初始化的顺序。
14.静态数据的初始化：他会获得基本类型的标准初值，如果是引用对象，他的默认初始化值就是null
初始化的顺序是先静态对象，然后是“非静态”对象
15.显示的静态初始化：java允许将多个静态初始化动作组织为一个特殊的“静态字句”
public class Sponn{
	static int i;
	static{
	i=47;}
	};
16.非静态实例初始化（static是否含有）
17.数组初始化：只需在类型名处加个[]，也可在标识符后
不确定数组中有多少元素是可以直接用new在数组中创建元素
可用花括号括起来的列表来初始化对象数组
18.//*不明白是什么*/；可变参数列表；适用于--可用花括号括起来的列表来初始化对象数组，Object类，可变参数列表中可以使用任何类型的参数，包括基本类型。 
可变参数：
在定义方法时，在最后一个形参后加上三点…，就表示该形参可以接受多个参数值，多个参数值被当成数组传入。上述定义有几个要点需要注意：可变参数只能作为函数的最后一个参数，但其前面可以有也可以没有任何其他参数，由于可变参数必须是最后一个参数，所以一个函数最多只能有一个可变参数，Java的可变参数，会被编译器转型为一个数组
19.枚举类型：enum关键字
enum,switch使用组合

